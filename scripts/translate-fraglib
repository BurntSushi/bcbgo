#!/usr/bin/env python2

import argparse
import os
import os.path
import sys

parser = argparse.ArgumentParser(
    description='Translate Fragbag fragment library to General Fragment Form.',
    formatter_class=argparse.ArgumentDefaultsHelpFormatter)
aa = parser.add_argument
aa('fraglib', type=str, metavar='INPUT_FRAGBAG_LIBRARY_FILE',
   help='Location of the Fragbag library ".brk" file.')
aa('outdir', type=str, metavar='OUTPUT_GFF_DIRECTORY',
   help='Location of the directory to output General Fragment Form files.')
conf = parser.parse_args()

# Check to make sure the fragment library file is readable. If not, error.
if not os.access(conf.fraglib, os.R_OK):
    print >> sys.stderr, 'Cannot read %s.' % conf.fraglib
    sys.exit(1)

# If the output directory hasn't been created, create it now.
if not os.path.isdir(conf.outdir):
    os.makedirs(conf.outdir)
    if not os.path.isdir(conf.outdir):
        print >> sys.stderr, 'Could not create %s directory.' % conf.outdir
        sys.exit(1)

# General Fragment Form is specified by a *directory* of fragments, where each
# fragment is represented by a single file. Each fragment file is made up of 
# only PDB ATOM records.

# Translation from Fragbag fragment libraries is very nearly a copy and paste
# process, but the ATOM record serial numbers and residues numbers have to be
# renumbered.

def getFragmentFile(fragmentNum):
    return open(os.path.join(conf.outdir, str(fragmentNum)), 'w')

fragmentNum = 1 # incremented on each 'TER' record.
fragmentFile = getFragmentFile(fragmentNum)
atomResSerial = 1
lines = open(conf.fraglib).readlines()
for i, line in enumerate(lines):
    if line[0:3] == 'TER':
        # If this is the last line, just quit. Don't create another file.
        if i == len(lines) - 1:
            break
        fragmentNum += 1
        fragmentFile = getFragmentFile(fragmentNum)
        atomResSerial = 1
        continue
    if line[0:4] != 'ATOM':
        print >> sys.stderr, 'Unrecognized record type: %s' % line[0:6]
        continue

    lst = list(line.strip())
    serial = str(atomResSerial)
    assert len(serial) <= 4 # Must fit as "Residue sequence number" too

    # Everything is fixed width, so pad numbers with spaces to the left.
    lst[6:11] = list(' ' * (5 - len(serial)) + serial)
    lst[22:26] = list(' ' * (4 - len(serial)) + serial)
    print >> fragmentFile, ''.join(lst)
    atomResSerial += 1

