#!/usr/bin/env python2.7

'''
1. Start with a random selection of PDB entries.

2. Search the PDB BOW database for 2 top hits, 2 middle hits and 2 bad hits.

3. Compute FragBag BOWs and HHfrag BOWs for each PDB entry.

4. Output distance of each with original query for both FragBag and HHfrag BOWs.
'''

import csv
import os
import sys

import pybcbgo as bcb
import pybcbgo.flags as flags

flags.use_all('frag-lib', 'bow-db', 'pdb-dir', 'pdb-hhm-db', 'seq-hhm-db',
              'hhfrag-inc', 'hhfrag-min', 'hhfrag-max',
              'blits', 'cpu', 'tmp-dir', 'results-dir',
              'ignore-cache', 'no-cache')
flags.use('pdbids', (
    lambda: flags.add(dest='pdbids', type=str,
                      help='A file containing PDB ids, one per line.'),
    flags.verify_path,
))
flags.init()

exp_dirname = '%s_%s_%s_%s_%d_%d_%d' % \
    (os.path.basename(flags.config.pdbids),
     flags.config.seq_hhm_db, flags.config.pdb_hhm_db,
     'hhblits' if flags.config.blits else 'hhsearch',
     flags.config.hhfrag_inc, flags.config.hhfrag_min, flags.config.hhfrag_max)
results_dirname = exp_dirname

exp_dir = os.path.join(flags.config.tmp_dir, exp_dirname)
results_dir = os.path.join(flags.config.results_dir, results_dirname)

bcb.make()
bcb.set_exp_dir(exp_dir)
bcb.set_results_dir(results_dir)

comparing = {}
for pdbid in map(str.strip, open(flags.config.pdbids)):
    def search(min=0.0, max=1.0):
        fp = bcb.pdb_path(pdbid)
        c = bcb.pdb_chain(pdbid)
        return bcb.search_bowdb_pdb(fp, chain=c, min=min, max=max)
    good = search()
    soso = search(min=0.35)
    bad = search(min=0.7)
    if 0 in map(len, [good, soso, bad]):
        bcb.eprintln('Something is screwy with %s... Skipping.' % pdbid)
        continue

    comparing[pdbid] = []
    for rs in (good, soso, bad):
        hits = filter(lambda row: row['HitID'] != row['QueryID'], rs)
        comparing[pdbid].append(hits[0])
        comparing[pdbid].append(hits[1])

for pdbid, relatives in comparing.iteritems():
    chains = [bcb.pdb_case(r['HitID']) for r in relatives]
    chains.append(bcb.pdb_case(pdbid))
    bcb.pdbids_to_fasta(chains)

bcb.fastas_to_fmap(bcb.eglob('*.fasta'))

for fmap in bcb.eglob('*.fmap'):
    bow_file = bcb.ejoin(bcb.base_ext(fmap, 'hhfrag.bow'))
    bcb.cached_cmd([bow_file],
                   'fmap2bow', flags.config.frag_lib, fmap, bow_file)

summary = bcb.rjoin('summary')
def summarize():
    fields = ['Query PDB', 'Target PDB', 'FragBag', 'HHfrag']
    w = csv.DictWriter(open(summary, 'w+'), fields, delimiter='\t')
    w.writerow({v:v for v in fields})
    for pdbid, relatives in comparing.iteritems():
        bow1 = bcb.pdb_case(pdbid)
        bow1_file = bcb.ejoin('%s.hhfrag.bow' % bow1)
        for r in relatives:
            bow2 = bcb.pdb_case(r['HitID'])
            bow2_file = bcb.ejoin('%s.hhfrag.bow' % bow2)
            hhfrag_dist = bcb.cmd('bow-dist', bow1_file, bow2_file).strip()
            w.writerow({
                'Query PDB': bow1,
                'Target PDB': bow2,
                'FragBag': r['Cosine'],
                'HHfrag': hhfrag_dist,
            })

bcb.cached([summary], summarize)

