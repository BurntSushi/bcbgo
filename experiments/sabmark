#!/usr/bin/env python2.7

from collections import OrderedDict
import csv
from functools import partial as curry
import glob
import os
import sys

import numpy as np

import pybcbgo as bcb
import pybcbgo.flags as flags
import pybcbgo.sabmark as sabmark

flags.use_all('pdb-dir', 'frag-lib', 'sabmark-dir', 'sabmark-set',
              'bow-db',
              'cpu', 'tmp-dir', 'results-dir',
              'ignore-cache', 'no-cache')
flags.use('groups', (
    lambda: flags.add(dest='groups', type=str,
                      help='A range of groups to test, inclusive. '+
                           '. e.g., "5-11" or "all".'),
    None,
))
flags.use('dist-cutoff', (
    lambda: flags.add('--dist-cutoff', dest='dist_cutoff', type=float,
                      default=0.35,
                      help='The cosine BOW distance cutoff. Results below '+
                           'this distance with the query will be guessed as '+
                           'True, and results above will be guessed as False.'),
    None,
))
flags.init()

bcb.make()

results_dirname = 'dist-%0.4f' % flags.config.dist_cutoff
results_dir = os.path.join(flags.config.results_dir,
                           flags.config.sabmark_set, results_dirname)
bcb.set_results_dir(results_dir)


def set_exp_dir(group):
    exp_dirname = 'group%d' % group
    exp_dir = os.path.join(flags.config.tmp_dir,
                           flags.config.sabmark_set, exp_dirname)
    bcb.set_exp_dir(exp_dir)

if flags.config.groups == 'all':
    groups = []
    for group_dir in glob.glob(sabmark.join('group*')):
        try:
            groups.append(int(os.path.basename(group_dir).replace('group', '')))
        except ValueError:
            bcb.eprintln('Could not get group id from dir "%s".' % group_dir)
            bcb.exit(1)
    groups = sorted(groups)
else:
    groups = bcb.parse_range(flags.config.groups)

for group in groups:

    set_exp_dir(group)

    def sabids_paths(sabids):
        return map(curry(sabmark.sabid_pdb_path, group), sabids)

    out = bcb.rjoin('group%d.csv' % group)
    def getstats():
        tps, fps = sabmark.group(group)
        bcb.mk_bowdb_pdbs('bowdb', sabids_paths(tps + fps))
        search = bcb.search_bowdb_pdb_many(sabids_paths(tps),
                                           bow_db='bowdb', limit=-1)

        tals = OrderedDict([
            ('cutoff', '%0.4f' % flags.config.dist_cutoff),
            ('queries', len(tps)),
            ('decoys', len(fps)),
            ('recov', 0), # number of times query recovers itself
            ('tp', 0), ('fp', 0), ('tn', 0), ('fn', 0),
            ('prec', 0.0), ('recall', 0.0),
        ])
        is_decoy = lambda sabid: sabid in fps
        is_neighbor = lambda sabid: sabid in tps
        for query, rows in search.iteritems():
            for row in rows:
                if row['Cosine'] < flags.config.dist_cutoff: # predict neighbor!
                    if query == row['HitID']: # recovered ourselves
                        tals['recov'] += 1
                    if is_decoy(row['HitID']): # sad :-(
                        tals['fp'] += 1
                    else: # woohoo!
                        tals['tp'] += 1
                else:
                    if is_decoy(row['HitID']): # woohoo!
                        tals['tn'] += 1
                    else: # sad :-(
                        tals['fn'] += 1
        tals['prec'] = float(tals['tp']) / float(tals['tp'] + tals['fp'])
        tals['recall'] = float(tals['tp']) / float(tals['tp'] + tals['fn'])

        outf = open(out, 'w+')
        print >> outf, '\t'.join(tals.iterkeys())
        print >> outf, '\t'.join(map(str, tals.itervalues()))

    bcb.cached([out], getstats)

# Now let's go through and tally up the total tp/fp/tn/fn.
# Always do this. Never cache.
totals = OrderedDict([
    ('cutoff', '%0.4f' % flags.config.dist_cutoff),
    ('queries', 0), ('decoys', 0),
    ('recov', 0),
    ('tp', 0), ('fp', 0), ('tn', 0), ('fn', 0),
    ('prec', 0), ('recall', 0),
])
for f in bcb.rglob('group*.csv'):
    for row in csv.DictReader(open(f), delimiter='\t'):
        for field in ('queries', 'decoys', 'recov', 'tp', 'fp', 'tn', 'fn'):
            totals[field] += int(row[field])
        break

totals['prec'] = float(totals['tp']) / float(totals['tp'] + totals['fp'])
totals['recall'] = float(totals['tp']) / float(totals['tp'] + totals['fn'])

outf = open(bcb.rjoin('totals.csv'), 'w+')
print >> outf, '\t'.join(totals.iterkeys())
print >> outf, '\t'.join(map(str, totals.itervalues()))

